--
-- The proof that assert preservesPos /= assert preservesPos'
-- 

assert presevesPos
= { definition preservesPos }
assert (DFun true (\x -> Pred (\y -> (>0) x == (>0) y)))
= { definition true }
assert (DFun (Pred (\_ -> True)) (\x -> Pred (\y -> (>0) x == (>0) y)))
= { definition assert (DFun pre post) }
(\f x -> (assert ((\x' -> Pred (\y -> (>0) x' == (>0) y)) x) . f . assert (Pred (\_ -> True))) x)
= { cleaned lambda }
(\f x -> (assert (Pred (\y -> (>0) x == (>0) y)) . f . assert (Pred (\_ -> True))) x)
= { definition assert (Pred p) }
(\f x -> (assert (Pred (\y -> (>0) x == (>0) y)) . f . (                                                  )) x)
                                                       (\x' -> if (\_ -> True) x' then x' else error "c v")
= { cleaned lambda }
                                                       (\x' -> if True then x' else error "c v")
= { definition if }
                                                       (\x' -> x')
= { function composition identity }
(\f x -> (assert (Pred (\y -> (>0) x == (>0) y)) . f) x)
= { definition assert (Pred p) }
(\f x -> ((                                                              ) . f) x)
          (\x' -> if (\y -> (>0) x == (>0) y) x' then x' else error "c v")
= { cleaned lambda }
          (\x' -> if (>0) x == (>0) x' then x' else error "c v")
= { the full expression }
(\f x -> ((\x' -> if (>0) x == (>0) x' then x' else error "c v") . f) x)
/= { *here the magic occurs* }
(\f x -> ((\x' -> if (>0) x' then x' else error "c v") . f . (\x' -> if (>0) x' then x' else error "c v")) x)
= { ? }
(\f x -> (assert (Pred (>0)) . f . assert (Pred (>0))) x)
= { cleaned lambda }
(\f x -> (assert ((\_ -> Pred (>0)) x) . f . assert (Pred (>0))) x)
assert (DFun (Pred (>0)) (\_ -> Pred (>0)))
= { definition pos }
assert (DFun pos (\_ -> pos))
= { definition (-->) }
assert (pos --> pos)
= { definition preservePos' }
assert preservesPos'
